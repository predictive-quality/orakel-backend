"""
    OpenID Connect authentication backends for Django REST framework
    ================================================================

    This modules defines backends allowing to authenticate a user using tokens generated by an
    OpenID Connect Provider (OP).

"""

import requests
import base64
import hashlib
from .settings import SYNC_USER_DB
from .OpenIDUpdateHandler import apply_data
from django.utils.encoding import smart_text, force_bytes
from requests.exceptions import HTTPError
from rest_framework.authentication import BaseAuthentication, get_authorization_header
from rest_framework.exceptions import AuthenticationFailed
from django.contrib.auth import get_user_model

from .settings import *
from .models import OIDCUser
from django.utils.module_loading import import_string
from sqlite3 import OperationalError

from absl import logging

BASE_64_AUTH = base64.b64encode((CLIENT_ID + ":" + CLIENT_SECRET).encode("utf-8")).decode("utf-8")

USER_MODEL = get_user_model()

def token_to_user(bearer_token):
    try:
        '''
        userinfo_response = requests.get(
            oidc_rp_settings.PROVIDER_USERINFO_ENDPOINT,
            headers={'Authorization': 'Bearer {0}'.format(bearer_token)})
        print(userinfo_response.json())
        userinfo_response.raise_for_status()
        '''
        introspect_response = requests.post(PROVIDER_URI + "token/introspect/", headers={"Authorization" : "Basic " + BASE_64_AUTH}, data={"token" : bearer_token}, verify=SSL_VERIFY)
        introspect_response.raise_for_status()
        #raise AuthenticationFailed('Bearer token seems invalid or expired.')
        #userinfo_response_data = userinfo_response.json()
        token_introspect_data = introspect_response.json()
    
        sub = token_introspect_data.get('sub')
        email = token_introspect_data.get('email', None)
        username = token_introspect_data.get('username', sub)

        user = USER_MODEL.objects.make_user(username, email)
        apply_data(user, token_introspect_data)
        oidc_user = OIDCUser(user=user, sub=sub, userinfo=token_introspect_data)

        # Tries to retrieve a corresponding user in the local database and creates it if applicable.
        #IDEA: Have setting if users must be registered!
        if SYNC_USER_DB:
            try:
                db_user, created = USER_MODEL.objects.update_or_create(username=user.username, defaults={'email': user.email, 'is_superuser' : user.is_superuser, 'is_staff' : user.is_staff, 'first_name' : user.first_name, 'last_name' : user.last_name, 'roles' : user.roles})
                db_oidc_user, oidc_created = OIDCUser.objects.update_or_create(user=db_user, defaults={'sub' : oidc_user.sub, 'userinfo': oidc_user.userinfo})
                return db_user, db_oidc_user
            except Exception as exc:
                logging.error(exc)
                return user, oidc_user
        else:
            return user, oidc_user
    except Exception as e:
        logging.error(str(e))
        return None

class BearerTokenAuthentication(BaseAuthentication):
    """ Allows to authenticate users using a bearer token coming from an OP.

    This authentication backend is able to authorize users by using an access token to fetch user
    information from an OpenID Connect Provider (OP). If the access token does not allow to fetch
    such information then it means that the user should not be authenticated.

    """

    #www_authenticate_realm = 'api'

   

    def authenticate(self, request):
        """ Authenticates users using a provided Bearer token. """
        # First step, retrieves the Bearer token from the authorization header.
        auth = get_authorization_header(request).split()
        if not auth or smart_text(auth[0].lower()) != 'bearer':
            return

        if len(auth) == 1:
            raise AuthenticationFailed('Invalid authorization header; no bearer token provided')
        elif len(auth) > 2:
            raise AuthenticationFailed('Invalid authorization header; many bearer tokens provided')

        bearer_token = smart_text(auth[1])

        # Tries to retrieve user information from the OP.
        return token_to_user(bearer_token)